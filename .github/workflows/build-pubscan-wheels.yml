name: Build wheels

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history for proper version detection

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      - name: Build Rust binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cargo build --release --package ruff_api_analyzer
          mkdir -p crates/ruff_api_analyzer/python/pubscan/bin
          cp target/release/api-analyzer crates/ruff_api_analyzer/python/pubscan/bin/
      
      - name: Build Rust binary (Windows)
        if: runner.os == 'Windows'
        run: |
          cargo build --release --package ruff_api_analyzer
          mkdir -p crates/ruff_api_analyzer/python/pubscan/bin
          copy target\release\api-analyzer.exe crates\ruff_api_analyzer\python\pubscan\bin\

      - name: Build wheels
        run: |
          # Change to the Python package directory
          cd crates/ruff_api_analyzer/python
          # Build wheels with cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse
        env:
          # Skip PyPy builds 
          CIBW_SKIP: "pp* *-musllinux*"
          # Build for Python 3.9 through 3.13
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          # Configure cibuildwheel to build the Rust binary before packaging
          CIBW_BEFORE_BUILD: "pip install -e ."
          # Environment variable to tell our setup.py not to build the binary (cibuildwheel will handle that)
          CIBW_ENVIRONMENT: "CIBUILDWHEEL=1"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: crates/ruff_api_analyzer/python/wheelhouse/*.whl

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels]
    runs-on: ubuntu-latest
    # Only release to PyPI on tag pushes
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare distribution files
        run: |
          mkdir -p dist_upload
          find dist -name "*.whl" -exec cp {} dist_upload \;

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist_upload/
