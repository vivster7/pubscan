name: Build wheels

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history for proper version detection

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Use Python 3.11+ for cibuildwheel 3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      - name: Build Rust binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cargo build --release --package ruff_api_analyzer
          mkdir -p crates/ruff_api_analyzer/python/pubscan/bin
          cp target/release/api-analyzer crates/ruff_api_analyzer/python/pubscan/bin/
          ls -la crates/ruff_api_analyzer/python/pubscan/bin/
      
      - name: Build Rust binary (Windows)
        if: runner.os == 'Windows'
        run: |
          cargo build --release --package ruff_api_analyzer
          mkdir -p crates/ruff_api_analyzer/python/pubscan/bin
          copy target\release\api-analyzer.exe crates\ruff_api_analyzer\python\pubscan\bin\
          dir crates\ruff_api_analyzer\python\pubscan\bin\

      - name: Create binary marker file to force platform wheel
        working-directory: crates/ruff_api_analyzer/python
        run: |
          # Create an __init__.py file in the bin directory
          echo "# This directory contains platform-specific binaries" > pubscan/bin/__init__.py
          # Create a MANIFEST.in file to ensure binary files are included
          echo "include pubscan/bin/*" > MANIFEST.in
          # Create a .dist-info/WHEEL file marker to force platform specificity
          mkdir -p .dist-info
          echo "[bdist_wheel]" > .dist-info/WHEEL
          echo "py-api-version=1.0" >> .dist-info/WHEEL
          echo "platform=true" >> .dist-info/WHEEL

      - name: Build wheels
        working-directory: crates/ruff_api_analyzer/python
        run: |
          # Check if the binary exists before building
          python -c "import os, sys; bin_exists = os.path.exists('pubscan/bin/api-analyzer') or os.path.exists('pubscan/bin/api-analyzer.exe'); print(f'Binary exists: {bin_exists}'); sys.exit(0 if bin_exists else 1)"
          # Build wheels with cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse --debug
        env:
          # Keep this: tells cibuildwheel not to run auditwheel/delocate/etc.
          CIBW_REPAIR_WHEEL_COMMAND: ""
          # This installs the package locally before building, which might be needed
          CIBW_BEFORE_BUILD: "pip install -e ."
          # Keep CIBUILDWHEEL=1 if your setup.py uses it
          # Remove FORCE_BDIST_WHEEL_PLATFORM=1 as it's likely no longer needed
          CIBW_ENVIRONMENT: "CIBUILDWHEEL=1"
          CIBW_SKIP: "pp* *-musllinux*"
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"

      - name: Check wheel contents
        working-directory: crates/ruff_api_analyzer/python
        run: |
          python -m pip install wheel
          python -c "import glob, zipfile; wheels = glob.glob('wheelhouse/*.whl'); print(f'Found wheels: {wheels}'); [print(f'Contents of {w}: {sorted(zipfile.ZipFile(w).namelist())}') for w in wheels]"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: crates/ruff_api_analyzer/python/wheelhouse/*.whl

  upload_to_pypi:
    name: Upload to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    # Only run on tags
    if: github.event_name == 'release' && github.event.action == 'created'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
