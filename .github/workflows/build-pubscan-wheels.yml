name: Build wheels

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Add other platforms/architectures if needed (e.g., macos-arm64)
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history for proper version detection

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      # Remove manual Rust build and file preparation steps
      # Maturin, invoked by cibuildwheel, will handle building the Rust binary
      # and packaging the Python code from the 'python' directory specified
      # in pyproject.toml [tool.maturin]

      - name: Build wheels
        # Run cibuildwheel from the directory containing pyproject.toml
        working-directory: crates/ruff_api_analyzer 
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          # Keep this: tells cibuildwheel not to run auditwheel/delocate/etc.
          # Maturin handles linking correctly.
          CIBW_REPAIR_WHEEL_COMMAND: ""
          # Skip architectures not needed or causing issues
          CIBW_SKIP: "pp* *-musllinux*"
          # Specify Python versions to build for
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          # No longer need CIBW_BEFORE_BUILD or CIBW_ENVIRONMENT

      - name: Check wheel contents
        working-directory: crates/ruff_api_analyzer # Check relative to where wheels were built
        run: |
          python -m pip install wheel
          python -c "import glob, zipfile; wheels = glob.glob('wheelhouse/*.whl'); print(f'Found wheels: {wheels}'); [print(f'Contents of {w}: {sorted(zipfile.ZipFile(w).namelist())}\n') for w in wheels]"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          # Path relative to workspace root
          path: crates/ruff_api_analyzer/wheelhouse/*.whl

  upload_to_pypi:
    name: Upload to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    # Only run on tags
    if: github.event_name == 'release' && github.event.action == 'created'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
