name: Build wheels

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Add other platforms/architectures if needed (e.g., macos-arm64)
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      - name: Build wheels
        # Run cibuildwheel from the directory containing pyproject.toml
        working-directory: crates/ruff_api_analyzer/python
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          # Skip architectures not needed
          CIBW_SKIP: "pp* *-musllinux*"
          # Specify Python versions (align with pyproject.toml)
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          # Install Rust inside the cibuildwheel environment using rustup and add cargo to PATH
          CIBW_BEFORE_BUILD: >
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable -y &&
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          CIBW_BEFORE_BUILD_WINDOWS: >
            Invoke-WebRequest https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe; 
            ./rustup-init.exe --default-toolchain stable -y; 
            echo "$env:USERPROFILE/.cargo/bin" | Out-File -Encoding utf8 -Append $env:GITHUB_PATH
          # No repair command needed, maturin handles tags
          CIBW_REPAIR_WHEEL_COMMAND: ""

      - name: Install and Test Wheel
        # Test in a different directory to ensure it works standalone
        run: |
          # Create a temporary directory for testing
          mkdir ../test_install
          cd ../test_install
          # Install one of the built wheels
          python -m pip install --find-links=../python/wheelhouse pubscan
          # Test the installed binary
          api-analyzer --help
        working-directory: crates/ruff_api_analyzer

      - name: Check wheel contents
        # Check relative to where wheels were built
        working-directory: crates/ruff_api_analyzer/python
        run: |
          python -m pip install wheel
          python -c "import glob, zipfile; wheels = glob.glob('wheelhouse/*.whl'); print(f'Found wheels: {wheels}'); [print(f'Contents of {w}: {sorted(zipfile.ZipFile(w).namelist())}\n') for w in wheels]"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          # Path relative to workspace root
          path: crates/ruff_api_analyzer/wheelhouse/*.whl

  upload_to_pypi:
    name: Upload to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    # Only run on tags
    if: github.event_name == 'release' && github.event.action == 'created'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
